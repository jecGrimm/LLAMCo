# -*- coding: utf-8 -*-
"""explore_Llama.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TZ1ORXorHWuQGnCL0ze4FbT3X0ZawQPt

Installation
"""

# !pip install datasets==2.13.1
# !pip3 install transformers
# !pip3 install optimum==1.13.2
# !pip3 install auto-gptq --extra-index-url https://huggingface.github.io/autogptq-index/whl/cu118/

# Get access
# from huggingface_hub import notebook_login
# notebook_login()

import torch
from transformers import pipeline

model_id = "meta-llama/Llama-3.2-1B-Instruct"
pipe = pipeline(
    "text-generation",
    model=model_id,
    torch_dtype=torch.bfloat16,
    device_map="auto",
)
# Sanity Check
messages = [
    {"role": "system", "content": "You are a pirate chatbot who always responds in pirate speak!"},
    {"role": "user", "content": "Who are you?"},
]
outputs = pipe(
    messages,
    max_new_tokens=256,
)
print(outputs[0]["generated_text"][-1])

"""Testlauf"""

DEFAULT_SYSTEM_PROMPT = """\
You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe.\
Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content.\
Please ensure that your responses are socially unbiased and positive in nature.

If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct.\
If you don’t know the answer to a question, please don’t share false information.\
If you don’t know the answer to a question, please answer with "NAN".\
"""

# Sanity Check: system prompt
messages = [
    {"role": "system", "content": DEFAULT_SYSTEM_PROMPT},
    {"role": "user", "content": "Who are you?"},
]

outputs = pipe(
    messages,
    max_new_tokens=256,
)
print(outputs[0]["generated_text"][-1])

TEST_PROMPT = """\
Please help me to collect structured metadata information about a published literary text.
Create a dictionary containing only the given output keys and the corresponding missing information for the author and title given by the input keys.\
Please refer to the explanations of the output keys to fill in the correct information.\
Please return "" as value if you don't know the answer.\
Please return only the output dictionary.\
\
Input keys:\
"author": name of an author\
"title": name of a creative work written by the author\
\
Output keys:\
"last_name": last name of the author given in the input\
"first_name": first names of the author given in the input\
"pseudonym": pseudonym of the author given in the input\
"gender": assumed gender of the author given in the input; possible values "m" (male), "f" (female)\
"title": title of the creative work given in the input\
"subtitle in the text": subtitle in the printed text of the creative work given in the input\
"subtitle in the table of contents": subtitle in the table of contents of the creative work given in the input\
"year_first_publication": year of the first publication of the creative work given in the input\
"developed": year of the development of the creative work given in the input\
"genre_first_publication": genre of the first publication of the creative work given in the input\
"medium_first_publication": medium of the first publication of the creative work given in the input\
"medium_type_first_publication": type of the medium of the first publication of the creative work given in the input\
"publisher": publisher of the first publication of the creative work given in the input\
"canon_status": canon status of the author given in the input; possible values are 0 (unknown author, author not part of the literary canon, no digitalized texts available on the internet), 1 (author unknown today, author not part of the literary canon, digitalized texts available on the internet), 2 (author known, author not part of the literary canon, digitalized texts available on the internet), 3 (author known, author part of the literary canon, digitalized texts available on the internet)\
"serial": if the creative work given in the input was published serially; possible values are True (creative work given in the input was published serially), False (creative work given in the input was not published serially)\
"pages": page numbers of the first publication of the creative work given in the input; format of the values is <first_page_number>-<last_page_number>\
"medium_second_publication": medium of the second publication of the creative work given in the input\
"year_second_publication": year of the second publication of the creative work given in the input\
"genre_second_publication": genre of the second publication of the creative work given in the input\
"medium_third_publication": medium of the third publication of the creative work given in the input\
"year_third_publication": year of the third publication of the creative work given in the input\
"genre_third_publication": genre of the third publication of the creative work given in the input\
"in_Deutscher_Novellenschatz_Heyse": if the creative work given in the input is listed in "Deutscher Novellenschatz" by Paul Heyse; possible values are True (creative work given in the input is listed in "Deutscher Novellenschatz" by Paul Heyse), False (creative work given in the input is not listed in "Deutscher Novellenschatz" by Paul Heyse)\
"in_Pantheon_Hoffmann": if the creative work given in the input is listed in "Pantheon" by Carl Hoffmann (publisher); possible values are True (creative work given in the input is listed in "Pantheon" by Carl Hoffmann (publisher)), False (creative work given in the input is not listed in "Pantheon" by Carl Hoffmann (publisher))\
"in_Novelle_von_Wiese": if the creative work given in the input is listed in "Novelle" by Benno von Wiese; possible values are True (creative work given in the input is listed in "Novelle" by Benno von Wiese), False (creative work given in the input is not listed in "Novelle" by Benno von Wiese)\
\
"""

zero_shot = 'Input: {"author": "E.T.A. Hoffmann", "title": "Der Sandmann"}\nOutput: '

# TEST Prompt
messages = [
    {"role": "system", "content": DEFAULT_SYSTEM_PROMPT},
    {"role": "user", "content": TEST_PROMPT+zero_shot},
]

zero_outputs = pipe(
    messages,
    max_new_tokens=500,
)
print(zero_outputs[0]["generated_text"][-1])

# pretty print
for line in zero_outputs[0]["generated_text"][-1]["content"].split('\n'):
   print(line)

one_shot = """Input: {"author": "Julius Lohmeyer", "title": "Das Pfarrhaus zu Goldschütz"}\nOutput: \
{\
    "last_name": "Lohmeyer",
    "first_name": "Julius",
    "pseudonym": "",
    "gender": "m",
    "title": "Das Pfarrhaus zu Goldschütz",
    "subtitle in the text": "Erzählung von Julius Lohmeyer",
    "subtitle in the table of contents": "",
    "year_first_publication": 1897,
    "developed": "",
    "genre_first_publication": "Erzählung",
    "medium_first_publication": "Monatsblätter für deutsche Literatur 2",
    "medium_type_first_publication": "Zeitschrift",
    "publisher": "",
    "canon_status": 0,
    "serial": True,
    "pages": "5-17, 56-67, 102-115, 150-172",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "E.T.A. Hoffmann", "title": "Der Sandmann"}\nOutput: """

# One shot example
messages = [
    {"role": "system", "content": DEFAULT_SYSTEM_PROMPT},
    {"role": "user", "content": TEST_PROMPT+one_shot},
]

one_outputs = pipe(
    messages,
    max_new_tokens=500,
)
print(one_outputs[0]["generated_text"][-1])

# pretty print
for line in one_outputs[0]["generated_text"][-1]["content"].split('\n'):
   print(line)

five_shot = """Input: {"author": "Julius Lohmeyer", "title": "Das Pfarrhaus zu Goldschütz"}\nOutput: \
{\
    "last_name": "Lohmeyer",
    "first_name": "Julius",
    "pseudonym": "",
    "gender": "m",
    "title": "Das Pfarrhaus zu Goldschütz",
    "subtitle in the text": "Erzählung von Julius Lohmeyer",
    "subtitle in the table of contents": "",
    "year_first_publication": 1897,
    "developed": "",
    "genre_first_publication": "Erzählung",
    "medium_first_publication": "Monatsblätter für deutsche Literatur 2",
    "medium_type_first_publication": "Zeitschrift",
    "publisher": "",
    "canon_status": 0,
    "serial": True,
    "pages": "5-17, 56-67, 102-115, 150-172",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "Edith Gräfin Salzburg", "title": "Ein Herz"}\nOutput: \
{\
    "last_name": "Gräfin Salzburg",
    "first_name": "Edith",
    "pseudonym": "",
    "gender": "f",
    "title": "Ein Herz",
    "subtitle in the text": "",
    "subtitle in the table of contents": "",
    "year_first_publication": 1897,
    "developed": "",
    "genre_first_publication": "Erzählung",
    "medium_first_publication": "Monatsblätter für deutsche Literatur 2",
    "medium_type_first_publication": "Zeitschrift",
    "publisher": "",
    "canon_status": 0,
    "serial": True,
    "pages": "248-253",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "Caroline Pichler", "title": "Die Walpurgnisnacht"}\nOutput: \
{\
    "last_name": "Pichler",
    "first_name": "Caroline",
    "pseudonym": "",
    "gender": "f",
    "title": "Die Walpurgnisnacht",
    "subtitle in the text": "Nach einer Sage",
    "subtitle in the table of contents": "Erzählung nach einer Sage, von Caroline Pichler",
    "year_first_publication": 1821,
    "developed": "",
    "genre_first_publication": "Erzählung",
    "medium_first_publication": "Aglaja. Ein Taschenbuch für das Jahr 1822",
    "medium_type_first_publication": "Taschenbuch",
    "publisher": "",
    "canon_status": 0,
    "serial": False,
    "pages": "16-63",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "Guntram", "title": "Die Nebenbuhlerin ihrer selbst"}\nOutput: \
{\
    "last_name": "Guntram",
    "first_name": "",
    "pseudonym": "Guntram",
    "gender": "",
    "title": "Die Nebenbuhlerin ihrer selbst",
    "subtitle in the text": "Erzählung",
    "subtitle in the table of contents": "",
    "year_first_publication": 1821,
    "developed": "",
    "genre_first_publication": "Erzählung",
    "medium_first_publication": "Urania. Taschenbuch auf das Jahr 1822",
    "medium_type_first_publication": "Taschenbuch",
    "publisher": "",
    "canon_status": 0,
    "serial": False,
    "pages": "434-475",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "Georg Büchner", "title": "Lenz"}\nOutput: \
{\
    "last_name": "Büchner",
    "first_name": "Georg",
    "pseudonym": "",
    "gender": "m",
    "title": "Lenz",
    "subtitle in the text": "Eine Reliquie von Georg Büchner",
    "subtitle in the table of contents": "",
    "year_first_publication": 1839,
    "developed": 1836,
    "genre_first_publication": "Reliquie",
    "medium_first_publication": "Telegraph für Deutschland",
    "medium_type_first_publication": "Zeitschrift",
    "publisher": "Person: Karl Gutzkow",
    "canon_status": 3,
    "serial": True,
    "pages": "",
    "medium_second_publication": "",
    "year_second_publication": "",
    "genre_second_publication": "",
    "medium_third_publication": "",
    "year_third_publication": "",
    "genre_third_publication": "",
    "in_Deutscher_Novellenschatz_Heyse": "",
    "in_Pantheon_Hoffmann": "",
    "in_Novelle_von_Wiese": ""
} \
\
Input: {"author": "E.T.A. Hoffmann", "title": "Der Sandmann"}\nOutput: """

# Five shot example
messages = [
    {"role": "system", "content": DEFAULT_SYSTEM_PROMPT},
    {"role": "user", "content": TEST_PROMPT+five_shot},
]

five_outputs = pipe(
    messages,
    max_new_tokens=500,
)
print(five_outputs[0]["generated_text"][-1])

# pretty print
for line in five_outputs[0]["generated_text"][-1]["content"].split('\n'):
   print(line)

print(five_outputs[0]["generated_text"][-1].keys())

# """Archiv"""

# # aus Übung, evtl nicht gebraucht
# model_name_or_path = "meta-llama/Llama-3.2-1B-Instruct" # TODO
# model = AutoModelForCausalLM.from_pretrained(model_name_or_path) # TODO
# tokenizer = AutoTokenizer.from_pretrained(model_name_or_path, use_fast=True)

# import re
# import json
# import random
# from collections import defaultdict, Counter
# from tqdm import tqdm, trange

# import torch

# from datasets import load_dataset
# from transformers import AutoModelForCausalLM, AutoTokenizer

# # Wsl unnötig
# !pip install --upgrade transformers